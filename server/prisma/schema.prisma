generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  nickname String @unique @map("nick_name")
  name     String
  email    String @unique
  password String
  avatar   String @default("/uploads/default-avatar.png") @map("avatar_path")

  role String @default("user") @map("is_admin")

  tracks         Track[]
  favoriteTracks Track[] @relation("FavoriteTracksByArtist")

  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text    String
  like    Int?
  dislike Int?

  track    Track?  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId  Int?

  artist   Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId Int?
}

model Track {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  src         String
  endlessTime String?
  rayting     Int?
  img         String?      
  genres      EnumGenres[]
  isNew       Boolean?

  artist   Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId Int?

  comments Comment[]

  favoriteArtist   Artist? @relation("FavoriteTracksByArtist", fields: [favoriteArtistId], references: [id])
  favoriteArtistId Int?
}

enum EnumGenres {
  ROCK
  LIRIC
  POP
  ELECTRONIC
  JAZZ
  CLASSICAL
  BLUES
  REGGAE
  FOLK
  PUNK
  METAL
  LATIN
  ALTERNATIVE
  FUNK
  SOUL
  RNB
  COUNTRY
  FUSION
  EXPERIMENTAL
  INDUSTRIAL
}
