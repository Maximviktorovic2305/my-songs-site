generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  nickname       String             @unique @map("nick_name")
  name           String
  email          String             @unique
  password       String
  avatar         String?            @map("avatar_path")
  role           String             @default("user") @map("is_admin")
  comments       Comment[]
  favoriteTracks FavoriteOnArtist[]
  tracks         Track[]

  givenRatings TrackRating[]         

  commentVotes     CommentVote[] 
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  text      String
  like      Int?
  dislike   Int?
  trackId   Int?
  artistId  Int?
  artist    Artist?  @relation(fields: [artistId], references: [id])
  track     Track?   @relation(fields: [trackId], references: [id], onDelete: Cascade)

  votes     CommentVote[] 
}

model Track {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  title              String
  src                String
  endlessTime        String?
  rayting            Float?
  genres             EnumGenres[]
  isNew              Boolean?
  artistId           Int?
  img                String?
  comments           Comment[]
  favoritedByArtists FavoriteOnArtist[]
  artist             Artist?            @relation(fields: [artistId], references: [id], onDelete: Cascade)

  ratings TrackRating[]
}

model TrackRating {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating   Int
  trackId  Int
  artistId Int

  track  Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([trackId, artistId])
}

model FavoriteOnArtist {
  artistId   Int
  trackId    Int
  assignedAt DateTime @default(now())
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([artistId, trackId])
}

model CommentVote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type      String   // 'like' or 'dislike'
  commentId Int
  artistId  Int

  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([commentId, artistId]) 
}

enum EnumGenres {
  ROCK
  LIRIC
  POP
  ELECTRONIC
  JAZZ
  CLASSICAL
  BLUES
  REGGAE
  FOLK
  PUNK
  METAL
  LATIN
  ALTERNATIVE
  FUNK
  SOUL
  RNB
  COUNTRY
  FUSION
  EXPERIMENTAL
  INDUSTRIAL
}
