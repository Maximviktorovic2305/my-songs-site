import { BadRequestException } from '@nestjs/common';
import { diskStorage } from 'multer';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
export const editFileName = (
  req: any,
  file: Express.Multer.File,
  callback: (
    error: Error | null,
    filename: string,
    originalName: string,
  ) => void,
) => {
  const originalname = file.originalname;
  const filename = `${Date.now()}-${originalname}`;
  if (!req.fileOriginalNames) {
    req.fileOriginalNames = {};
  }
  req.fileOriginalNames[filename] = originalname;
  callback(null, filename, originalname);
};

const filenameWrapper = (
  req: any,
  file: Express.Multer.File,
  callback: (error: Error | null, filename: string) => void,
) => {
  editFileName(req, file, (error, filename, originalName) => {
    if (error) {
      return callback(error, '');
    }
    callback(null, filename);
  });
};

export const trackFileUploadOptions = {
  storage: diskStorage({
    destination: './uploads',
    filename: filenameWrapper,
  }),
  fileFilter: (
    req: any,
    file: Express.Multer.File,
    callback: (error: Error | null, acceptFile: boolean) => void,
  ) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    if (file.fieldname === 'image' || file.fieldname === 'avatar') {
      if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
        return callback(
          new BadRequestException('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!'),
          false,
        );
      }

      // üîê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –±–æ–ª–µ–µ 5 –ú–ë
      if (file.size > 5 * 1024 * 1024) {
        return callback(
          new BadRequestException(
            '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 5 –ú–ë.',
          ),
          false,
        );
      }

      callback(null, true);
    } else if (file.fieldname === 'audio') {
      if (!file.originalname.match(/\.(mp3|mpeg)$/i)) {
        return callback(
          new BadRequestException('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ MP3!'),
          false,
        );
      }

      callback(null, true);
    } else {
      callback(new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—è —Ñ–∞–π–ª–∞!'), false);
    }
  },
  limits: {
    fileSize: 15 * 1024 * 1024, // –û–±—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 15 –ú–ë
  },
};
